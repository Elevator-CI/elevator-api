// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repositories.Database;

namespace Repositories.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210525083426_Users")]
    partial class Users
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Repositories.Database.Models.Build", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildConfigId")
                        .HasColumnType("uuid");

                    b.Property<int>("BuildStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<string>>("Logs")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("BuildConfigId");

                    b.ToTable("Builds");
                });

            modelBuilder.Entity("Repositories.Database.Models.BuildConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("BuildConfigs");
                });

            modelBuilder.Entity("Repositories.Database.Models.BuildStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildConfigId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BuildStepScriptId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildConfigId");

                    b.HasIndex("BuildStepScriptId");

                    b.ToTable("BuildSteps");
                });

            modelBuilder.Entity("Repositories.Database.Models.BuildStepScript", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Arguments")
                        .HasColumnType("text");

                    b.Property<string>("Command")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BuildStepScript");
                });

            modelBuilder.Entity("Repositories.Database.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GitToken")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ProjectUri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Repositories.Database.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<List<string>>("ProjectsWithAdminAccess")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("ProjectsWithUserAccess")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Repositories.Database.Models.Build", b =>
                {
                    b.HasOne("Repositories.Database.Models.BuildConfig", null)
                        .WithMany("Builds")
                        .HasForeignKey("BuildConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repositories.Database.Models.BuildConfig", b =>
                {
                    b.HasOne("Repositories.Database.Models.Project", null)
                        .WithMany("BuildConfigs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Repositories.Database.Models.BuildStep", b =>
                {
                    b.HasOne("Repositories.Database.Models.BuildConfig", null)
                        .WithMany("BuildSteps")
                        .HasForeignKey("BuildConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repositories.Database.Models.BuildStepScript", "BuildStepScript")
                        .WithMany()
                        .HasForeignKey("BuildStepScriptId");

                    b.Navigation("BuildStepScript");
                });

            modelBuilder.Entity("Repositories.Database.Models.BuildConfig", b =>
                {
                    b.Navigation("Builds");

                    b.Navigation("BuildSteps");
                });

            modelBuilder.Entity("Repositories.Database.Models.Project", b =>
                {
                    b.Navigation("BuildConfigs");
                });
#pragma warning restore 612, 618
        }
    }
}
